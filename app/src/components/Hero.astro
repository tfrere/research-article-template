---
import HtmlEmbed from "./HtmlEmbed.astro";

interface Props {
  title: string; // may contain HTML (e.g., <br/>)
  titleRaw?: string; // plain title for slug/PDF (optional)
  description?: string;
  authors?: Array<
    string | { name: string; url?: string; affiliationIndices?: number[] }
  >;
  affiliations?: Array<{ id: number; name: string; url?: string }>;
  affiliation?: string; // legacy single affiliation
  published?: string;
  doi?: string;
}

const {
  title,
  titleRaw,
  description,
  authors = [],
  affiliations = [],
  affiliation,
  published,
  doi,
} = Astro.props as Props;

type Author = { name: string; url?: string; affiliationIndices?: number[] };

function normalizeAuthors(
  input: Array<
    | string
    | {
        name?: string;
        url?: string;
        link?: string;
        affiliationIndices?: number[];
      }
  >,
): Author[] {
  return (Array.isArray(input) ? input : [])
    .map((a) => {
      if (typeof a === "string") {
        return { name: a } as Author;
      }
      const name = (a?.name ?? "").toString();
      const url = (a?.url ?? a?.link) as string | undefined;
      const affiliationIndices = Array.isArray((a as any)?.affiliationIndices)
        ? (a as any).affiliationIndices
        : undefined;
      return { name, url, affiliationIndices } as Author;
    })
    .filter((a) => a.name && a.name.trim().length > 0);
}

const normalizedAuthors: Author[] = normalizeAuthors(authors as any);

// Determine if affiliation superscripts should be shown (only when there are multiple distinct affiliations referenced by authors)
const authorAffiliationIndexSet = new Set<number>();
for (const author of normalizedAuthors) {
  const indices = Array.isArray(author.affiliationIndices)
    ? author.affiliationIndices
    : [];
  for (const idx of indices) {
    if (typeof idx === "number") {
      authorAffiliationIndexSet.add(idx);
    }
  }
}
const shouldShowAffiliationSupers = authorAffiliationIndexSet.size > 1;
const hasMultipleAffiliations =
  Array.isArray(affiliations) && affiliations.length > 1;

function stripHtml(text: string): string {
  return String(text || "").replace(/<[^>]*>/g, "");
}

function slugify(text: string): string {
  return (
    String(text || "")
      .normalize("NFKD")
      .replace(/\p{Diacritic}+/gu, "")
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, "-")
      .replace(/^-+|-+$/g, "")
      .slice(0, 120) || "article"
  );
}

const pdfBase = titleRaw ? stripHtml(titleRaw) : stripHtml(title);
const pdfFilename = `${slugify(pdfBase)}.pdf`;
---

<section class="w-full pt-12 pb-4 px-4 text-center">
  <h1
    class="text-3xl sm:text-4xl lg:text-5xl font-extrabold leading-tight m-0 mb-2 max-w-full mx-auto"
    set:html={title}
  />
  <div class="max-w-4xl mx-auto">
    <HtmlEmbed src="banner.html" frameless />
    {
      description && (
        <p class="text-gray-500 dark:text-gray-400 italic m-0 mb-4">
          {description}
        </p>
      )
    }
  </div>
</section>

<header
  class="border-t border-b border-gray-200 dark:border-gray-700 py-4 text-sm"
  aria-label="Article meta information"
>
  <div
    class="max-w-4xl mx-auto flex flex-row justify-between px-4 gap-2 md:flex md:gap-2 max-md:flex-wrap"
  >
    {
      normalizedAuthors.length > 0 && (
        <div class="meta-cell flex flex-col gap-2 max-w-64 md:min-w-0 max-xs:text-center">
          <h3 class="m-0 text-xs font-normal text-gray-500 dark:text-gray-400 uppercase tracking-wide">
            Author{normalizedAuthors.length > 1 ? "s" : ""}
          </h3>
          <ul class="m-0 list-none p-0 flex flex-wrap">
            {normalizedAuthors.map((a, i) => {
              const supers =
                shouldShowAffiliationSupers &&
                Array.isArray(a.affiliationIndices) &&
                a.affiliationIndices.length ? (
                  <sup>{a.affiliationIndices.join(",")}</sup>
                ) : null;
              return (
                <li class="whitespace-nowrap mr-1">
                  {a.url ? (
                    <a
                      href={a.url}
                      class="text-blue-600 dark:text-blue-400 underline underline-offset-2 decoration-1 decoration-blue-300 dark:decoration-blue-500 hover:decoration-blue-500 dark:hover:decoration-blue-400 transition-colors duration-150"
                    >
                      {a.name}
                    </a>
                  ) : (
                    a.name
                  )}
                  {supers}
                  {i < normalizedAuthors.length - 1 && ", "}
                </li>
              );
            })}
          </ul>
        </div>
      )
    }
    {
      Array.isArray(affiliations) && affiliations.length > 0 && (
        <div class="meta-cell flex flex-col gap-2 max-w-64 max-md:text-right md:min-w-0 max-xs:text-center">
          <h3 class="m-0 text-xs font-normal text-gray-500 dark:text-gray-400 uppercase tracking-wide">
            Affiliation{affiliations.length > 1 ? "s" : ""}
          </h3>
          {hasMultipleAffiliations ? (
            <ol class="m-0 pl-5 max-xs:list-inside max-xs:pl-0 max-xs:ml-0">
              {affiliations.map((af) => (
                <li value={af.id} class="m-0 max-xs:text-center">
                  {af.url ? (
                    <a
                      href={af.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="text-blue-600 dark:text-blue-400 underline underline-offset-2 decoration-1 decoration-blue-300 dark:decoration-blue-500 hover:decoration-blue-500 dark:hover:decoration-blue-400 transition-colors duration-150"
                    >
                      {af.name}
                    </a>
                  ) : (
                    af.name
                  )}
                </li>
              ))}
            </ol>
          ) : (
            <p class="m-0">
              {affiliations[0]?.url ? (
                <a
                  href={affiliations[0].url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="text-blue-600 dark:text-blue-400 underline underline-offset-2 decoration-1 decoration-blue-300 dark:decoration-blue-500 hover:decoration-blue-500 dark:hover:decoration-blue-400 transition-colors duration-150"
                >
                  {affiliations[0].name}
                </a>
              ) : (
                affiliations[0]?.name
              )}
            </p>
          )}
        </div>
      )
    }
    {
      (!affiliations || affiliations.length === 0) && affiliation && (
        <div class="meta-cell flex flex-col gap-2 max-w-64 max-md:text-right md:min-w-0 max-xs:text-center">
          <h3 class="m-0 text-xs font-normal text-gray-500 dark:text-gray-400 uppercase tracking-wide">
            Affiliation
          </h3>
          <p class="m-0">{affiliation}</p>
        </div>
      )
    }
    {
      published && (
        <div class="meta-cell flex flex-col gap-2 max-w-64 md:min-w-0 max-xs:text-center">
          <h3 class="m-0 text-xs font-normal text-gray-500 dark:text-gray-400 uppercase tracking-wide">
            Published
          </h3>
          <p class="m-0">{published}</p>
        </div>
      )
    }
    <!-- {doi && (
      <div class="meta-container-cell">
        <h3>DOI</h3>
        <p><a href={`https://doi.org/${doi}`} target="_blank" rel="noopener noreferrer">{doi}</a></p>
      </div>
    )} -->
    <div
      class="meta-cell flex flex-col gap-2 max-w-64 max-md:text-right md:min-w-0 max-xs:text-center"
    >
      <h3
        class="m-0 text-xs font-normal text-gray-500 dark:text-gray-400 uppercase tracking-wide"
      >
        PDF
      </h3>
      <p class="m-0">
        <a
          class="inline-block px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-150 no-underline"
          href={`/${pdfFilename}`}
          download={pdfFilename}
          aria-label={`Download PDF ${pdfFilename}`}
        >
          Download PDF
        </a>
      </p>
    </div>
  </div>
</header>

<style>
  /* Flex behavior for meta cells */
  .meta-cell {
    flex: 1 1 calc(50% - 8px);
  }

  .meta-cell.max-xs\:flex-1 {
    flex: 1 1 100% !important;
  }

  @media print {
    .max-md\\:text-right {
      @apply hidden;
    }
  }
</style>
